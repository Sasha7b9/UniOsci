#pragma once 
#include "defines.h"


typedef enum
{
    kFlashDisplay,              // Таймер для мерцающих участков экрана чёрно-белого дисплея.
    kTemp,                      // Вспомогательный, для общих нужд.
    TypeTimerSize               // Общее количество таймеров.
} TypeTimer;

typedef enum
{
    kDelayTrig                  // Для СИНХР -> Удержание
} TypePersonalTimer;

void    Timer_Init();
void    Timer_PauseOnTime(uint timeMS);
void    Timer_PauseOnTicks(uint numTicks);

void    Timer_Enable(TypeTimer type, int timeInMS, pFuncVV);
void    Timer_Disable(TypeTimer type);          // Остановить таймер
void    Timer_Pause(TypeTimer type);            // Приостановить таймер. Запустить снова можно функцией Timer_Continue()
void    Timer_Continue(TypeTimer type);         // Продолжить работу таймера, ранее приостановленного функцией Timer_Pause()
bool    Timer_IsRun(TypeTimer type);            // С помощью этой функции можно узнать, работает ли таймер

void    Timer_StartMultiMeasurement();      // Запускает счётчик для измерения малых отрезков времени.

void    Timer_StartLogging();               // Устанавливает стартовую точку логгирования. Далее вызовы Timer_LogPoint засекают временные интервалы от это точки.
uint    Timer_LogPointUS(char *name);
uint    Timer_LogPointMS(char *name);

void PersonalTimer_Start(TypePersonalTimer type, uint timeMS, bool repeat, pFuncVV func);
void PersonalTimer_Stop(TypePersonalTimer type);

//extern uint gTimeMS;

/**
  * gTimerTics - количество тиков, прошедших с момента последнего вызова функции Timer_StartMultiMeasurement(). Не более (1 << 32)
  * В одной секунде 120.000.000 тиков для С8-53 и 90.000.000 тиков для С8-54.
  * Максимальный отрезок времени, который можно отсчитать с её помощью - 35 сек.
***/
#define gTimerTics (TIM2->CNT)
#define TICS_IN_US(x) ((x) / 90)

// Время, прошедшее с момента инициализации таймера, в миллисекундах
#define gTimeMS (TIM5->CNT / 10)                    
