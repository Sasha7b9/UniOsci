#pragma once
#include "Data/DataSettings.h"
#include "Settings/SettingsTypes.h"


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/** @defgroup Utils
 *  @{
 *  @defgroup GlobalFunctions Global Functions
 *  @{
 */

class Translate
{
public:
    /// @brief Преобразует value в текстовую строку. При этом выводятся все 8 разрядов
    /// @attention Строка будет храниться до следующего вызова функции. Если результат нужен большее количество времени, то его нужно скопировать себе
    char* Bin2String(uint8 value, char bufferOut[9]);
    /// @brief Преобразует value в текстовую строку
    /// @attention Строка будте храниться до следующего вызова функции. Если рузультат нужен большее количество времени, то его нужно скопировать себе
    char* Bin2String16(uint16 value, char bufferOut[19]);
    /// @brief Преобразует value в текстовую строку в шестнадцатиричном виде
    /// @attention Строка будет храниться до следующего вызова функции. Если результат нужен большее количество времени, то его нужно скопировать себе
    char* Hex8toString(uint8 value, char bufferOut[3], bool upper);

    char* Hex16toString(uint16 value, char bufferOut[5], bool upper);

    char* Hex32toString(uint32 value, char bufferOut[9], bool upper);
    /// @brief Преобразует value в текстовую строку
    /// @attention Строка будет храниться до следующего вызова функции. Если результат нужен большее количество времени, то его нужно скопировать себе
    char* Int2String(int value,                     ///< значение
                     bool alwaysSign,               ///< если установлен в true, знак будет выводиться всегда
                     int numMinFields,              ///< минимальное число занимаемых знакомест. Если для вывода числа столько не требуется, лишние заполняются нулями
                     char bufferOut[20]             ///< сюда записывается возвращаемое значение
    );

    bool String2Int(char *str, int *value);
        /// @brief Преобразует time секунд в текстовую строку
    char* Time2StringAccuracy(float time,           ///< время в секундах. Может быть отрицательным
                              bool alwaysSign,      ///< если true, знак показывается даже если time > 0
                              char bufferOut[20],   ///< сюда записывается возвращаемое значение
                              int numDigits         ///< количество цифр в строке
    );
    /// Преобразует freq герц в текстовую строку. При этом число количество цифр в строке равно numDigits
    char* Freq2StringAccuracy(float freq, char bufferOut[20], int numDigits);
    /// Преобразует децибелы в текстовую строку
    char* Float2Db(float value, int numDigits, char bufferOut[20]);

    int BCD2Int(uint bcd);
};


extern Translate trans;

/// Возвращает true, если value входит в диапазон [min; max]
bool IntInRange(int value,                      ///< проверяемое значение
                int min,                        ///< нижняя граница диапазона
                int max                         ///< верхняя граница диапазона
                );
/// Выделяет память из кучи для канала. Настройки длины памяти берёт из ds или set (если ds == 0)
void *AllocMemForChannelFromHeap(Channel ch, DataSettings *ds);
/// Возвращает количество памяти, требуемой для сохранения данных одного канала
int RequestBytesForChannel(Channel ch, DataSettings *ds);
void BubbleSortINT(int array[], int num);
/// Возвращает максимальное значение из трёх
float MaxFloat(float val1, float val2, float val3);
/// Увелечивает значение по адресу val на delta. Затем, если результат больше max, приравнивает его min
float CircleAddFloat(float *val, float delta, float min, float max);
/// Уменьшает значение по адресу val на delta. Затем, елси результат меньше min, приравнивает его masx
float CircleSubFloat(float *val, float delta, float min, float max);
/// Прибавить к значению по адресу val delta. Если результат не вписывается в диапазон [min; max], ограничить
void AddLimitationFloat(float *val,             ///< по этому адресу хранится значение.
                        float delta,            ///< а это дельта.
                        float min,              ///< нижняя граница диапазона.
                        float max               ///< верхняя граница диапазона.
                        );
/// Обменивает местами содержимое памяти по адресам value0 и value1
void SwapInt(int *value0, int *value1);
/// Размещает переменные value0 и value1 в порядке возрастания
void SortInt(int *value0, int *value1);
/// Возвращает изображение регулятора, соответствующее его текущему положению
char GetSymbolForGovernor(int value);
/// Функция-заглушка. Ничего не делает
void EmptyFuncVV(void);
/// Функция-заглушка. Ничего не делает
void EmptyFuncVpV(void *);
/// Функция-заглушка. Ничего не делает
void EmptyFuncVII(int, int);
void EmptyFuncVI(int);
bool EmptyFuncBV();
void EmptyFuncVB(bool);
/// Функция-заглушка. Ничего не делает
void EmptyFuncpVII(void *, int, int);
/// Заполнить массив одним значением
void FillArrayUINT8(uint8 *data, uint8 value, int numElements);
/// Найти первый элемент массива, не соотвествующий заданному
int FindAnotherElement(uint8 *data, uint8 value, int numElements);

char* IntToStrCat(char *_buffer, int _value);
/// Выводит numElements элементов массива array в одной строке консоли
void LoggingArrayUINT8(char *label, uint8 *array, int numElements);


/** @}  @}
 */
